package com.blog.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.blog.exception.UserException;
import com.blog.payloads.DeleteResponse;
import com.blog.payloads.UserDto;
import com.blog.service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@PostMapping("/create")
	public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto){
		
		UserDto createUser = userService.createUser(userDto);
		return new ResponseEntity<UserDto>(createUser, HttpStatus.CREATED);
	}
	
	@PatchMapping("/update/{id}")
	public ResponseEntity<UserDto> updateUser(@PathVariable("id") Integer id,@RequestBody UserDto userDto) throws UserException{
		
		UserDto updateUser = userService.updateUser(id, userDto);
		return new ResponseEntity<UserDto>(updateUser, HttpStatus.OK);
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<DeleteResponse> deleteuser(@PathVariable("id") Integer id) throws UserException{
		
		userService.deleteUser(id);
		return new ResponseEntity<DeleteResponse>(new DeleteResponse("User deleted successfully",true), HttpStatus.CONTINUE);
	}
	
	@GetMapping("/user/{id}")
	public ResponseEntity<UserDto> userById(@PathVariable("id") Integer id) throws UserException{
		
		UserDto user = userService.getUserById(id);
		return new ResponseEntity<UserDto>(user, HttpStatus.OK);
	}
	
	@GetMapping("/users")
	public ResponseEntity<List<UserDto>> allUsers() throws UserException{
		
		List<UserDto> users = userService.getAllUsers();
		return new ResponseEntity<List<UserDto>>(users, HttpStatus.OK);
	}
	
	@GetMapping("/users/{pageSize}/{pageNumber}")
	public ResponseEntity<List<UserDto>> allUsersSortHandler() throws UserException{
		
		List<UserDto> users = userService.getAllUsers();
		return new ResponseEntity<List<UserDto>>(users, HttpStatus.OK);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
